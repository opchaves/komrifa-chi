// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  email,
  password,
  verification_token,
  avatar
) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, password, verified, active, verification_token, avatar, created_at, updated_at
`

type CreateUserParams struct {
	Name              string  `json:"name"`
	Email             string  `json:"email"`
	Password          string  `json:"password"`
	VerificationToken *string `json:"verification_token"`
	Avatar            string  `json:"avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.VerificationToken,
		arg.Avatar,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Active,
		&i.VerificationToken,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deactivateUser = `-- name: DeactivateUser :one
UPDATE users SET active = false WHERE id = $1 RETURNING id
`

func (q *Queries) DeactivateUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deactivateUser, id)
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, verified, active, verification_token, avatar, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Active,
		&i.VerificationToken,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password, verified, active, verification_token, avatar, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.Active,
		&i.VerificationToken,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password, verified, active, verification_token, avatar, created_at, updated_at FROM users ORDER BY id
`

func (q *Queries) GetUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Verified,
			&i.Active,
			&i.VerificationToken,
			&i.Avatar,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isEmailTaken = `-- name: IsEmailTaken :one
SELECT 1 FROM users WHERE email = $1
`

func (q *Queries) IsEmailTaken(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, isEmailTaken, email)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const verifyUser = `-- name: VerifyUser :one
UPDATE users SET verified = true, verification_token = NULL WHERE id = $1 RETURNING id
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, verifyUser, id)
	err := row.Scan(&id)
	return id, err
}
